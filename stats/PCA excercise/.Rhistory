library(readr)
blood_groups_world_distribution <- read_csv("blood_groups_world_distribution.csv")
View(blood_groups_world_distribution)
abo <- blood_groups_world_distribution
names(abo) <- c("Country","Population","O+","A+","B+","AB+","O-","A-","B-","AB-")
head(abo)
View(abo)
summary(abo)
View(blood_groups_world_distribution)
#  1. Which is the most common blood type: O+ or O-?
o_plus_avg = ave(abo$`O+`, FUN=mean)
#  1. Which is the most common blood type: O+ or O-?
o_plus_avg = mean(abo$`O+`)
#  1. Which is the most common blood type: O+ or O-?
o_plus_avg = abo$`O+` * abo$Population / sum(abo$Population)
#  1. Which is the most common blood type: O+ or O-?
o_plus_avg =sum(abo$`O+` * abo$Population) / sum(abo$Population)
o_minus_avg =sum(abo$`O-` * abo$Population) / sum(abo$Population)
View(abo)
abo$0 <- abo$`O+` + abo$`O-`
abo$O <- abo$`O+` + abo$`O-`
abo$A <- abo$`A+` + abo$`A-`
abo$B <- abo$`B+` + abo$`B-`
abo$AB <- abo$`AB+` + abo$`AB-`
View(abo)
#  2. On how many countries the most common blood type is A?
a_common_filtered = abo[abo$A == max(abo$O, abo$A, abo$B, abo$AB)]
abo$most_common_pct = max(abo$O, abo$A, abo$B, abo$AB)
View(abo)
abo$most_common_pct =
abo[, "most_common_pct"] <- apply(abo[, 11:14], 1, max)
View(abo)
countries_with_most_common_A <- abo[abo$A == abo$most_common_pct]
countries_with_most_common_A <- abo[abo$A = abo$most_common_pct]
library(dplyr)
countries_with_most_common_A <- abo %>% filter(abo, abo$A == abo$most_common_pct)
countries_with_most_common_A <- abo %>% filter(.abo, abo$A == abo$most_common_pct)
countries_with_most_common_A <- abo %>% filter(abo, A == most_common_pct)
countries_with_most_common_A <- filter(abo, A == most_common_pct)
#  3. Show the five countries with the higher percentage of AB types.
abo %>% sort(abo, decreasing = TRUE, abo$AB)
arrange(abo, AB)
slice_max(abo, AB, 5)
countries_with_most_common_AB <- arrange(abo, desc(AB))
countries_with_most_common_AB <- sslice_head(countries_with_most_common_AB, n = 5)
countries_with_most_common_AB <- slice_head(countries_with_most_common_AB, n = 5)
countries_with_most_common_AB
countries_with_most_common_AB$Country
abo$'RH-' <- abo$`O-` + abo$`A-` + abo$`B-` + abo$`AB-`
abo$'RH-ABS' <- abo$`O-` + abo$`A-` + abo$`B-` + abo$`AB-`
total_VH_negative = sum(abo$`RH-ABS`)
View(abo)
abo$'RH-ABS' <-  abo$Population * (abo$`O-` + abo$`A-` + abo$`B-` + abo$`AB-`)
total_VH_negative = sum(abo$`RH-ABS`)
total_VH_negative_pct = round((total_VH_negative / sum(abo$Population)),3)
israel <- abo[abo$Country == 'Israel']
israel <- abo %>% filter(Country == 'Israel')
View(israel)
us <- abo %>% filter(Country == 'United States')
View(us)
plot(israel)
dist(israel)
dist(israel[,3:10])
plot(dist(israel[,3:10]))
israel[,3:10]
hist(israel[,3:10])
israel_num <- as.numeric(israel)
cor.test(israel, us, method = "spearman",na.rm=T)
cor.test(as.numeric(israel), us, method = "spearman",na.rm=T)
cor.test(as.numeric(israel), as.numeric(us), method = "spearman",na.rm=T)
hist(israel)
hist(as.numeric(israel))
hist(as.numeric(us))
israel
hist(as.numeric(israel[,3:10]))
israel <- abo %>% filter(Country == 'Israel')
israel <- israel[,3:10]
israel
us <- abo %>% filter(Country == 'United States')
us <- us[,3:10]
plot(israel)
israel_us <- abo %>% filter(Country == 'Israel' || Country == 'United States')
israel_us <- israel_us[,1:10]
View(israel_us)
israel_us <- abo %>% filter(Country == 'Israel' | Country == 'United States')
israel_us <- israel_us[,1:10]
View(israel_us)
israel_us$Population <- null
View(israel_us)
israel_us$Population <- null
israel_us <- subset(israel_us, -c(Population))
israel_us <- subset(israel_us, -c('Population'))
israel_us <- subset(israel_us, select= -c('Population'))
israel_us <- subset(israel_us, select= -c(Population'))
plot(israel,)
hist(as.numeric(israel[,3:10]))
hist(as.numeric(us))
cor.test(as.numeric(israel), as.numeric(us), method = "spearman",na.rm=T)
#  6. Is there a statistical significant difference between the distribution of Israel and Russia?
#  7. Use different clustering techniques to classify the distribution of the eight blood cell types. Which cluster give a more logical segmentation?
#### Note:
#  Use the NbClust package to calculate the optimal number of clusters. Also use plots coloring the groups with the resulting clusters. You can use the autoplot function (ggfortify package) to see the cluster distribution. Pass the Country values as rownames so you can see each country on the graphs.
#  8. Analyze the dataset using Principal Component Analysis (PCA).
israel_us <- subset(israel_us, select = -c(Population))
View(israel_us)
israel_us <- abo %>% filter(Country == 'Israel' | Country == 'United States')
israel_us <- israel_us[,1:10]
israel_us <- subset(israel_us, select = -c(Population))
View(israel_us)
View(israel_us)
library(data.table)
israel_us_trans <- transpose(israel_us)
View(israel_us_trans)
groups_names = names(israel_us)
groups_names = names(israel_us)[2:9]
israel_us_trans <- transpose(israel_us)
View(israel_us_trans)
israel_us_trans$group = groups_names
israel_us_trans$group = groups_names
View(israel_us_trans)
groups_names = names(israel_us)
israel_us_trans <- transpose(israel_us)
israel_us_trans$group = groups_names
View(israel_us_trans)
israel_us_trans <- israel_us_trans[2:9,]
View(israel_us_trans)
ggplot(israel_us_trans, aes(x=group, y=value, color=variable)) + geom_line()
library("ggplot2")
ggplot(israel_us_trans, aes(x=group, y=value, color=variable)) + geom_line()
View(israel_us_trans)
ggplot(data=df, aes(x=group, y=V1)) + geom_bar(stat="identity")
ggplot(data=israel_us_trans, aes(x=group, y=V1)) + geom_bar(stat="identity")
israel_us <- abo %>% filter(Country == 'Israel' | Country == 'United States')
View(israel_us)
israel_us <- israel_us[,1:10]
View(israel_us)
ggplot(data=israel_us_trans, aes(x=group, y=V2)) + geom_bar(stat="identity")
ggplot(data=israel_us_trans, aes(x=group, y=V1)) + geom_bar(stat="identity")
ggplot(data=israel_us_trans, aes(x=group, y=V1)) + geom_bar(stat="identity")
ggplot(data=israel_us_trans, aes(x=group, y=V1)) + geom_bar(stat="identity")
ggplot(data=israel_us_trans, aes(x=group, y=V2)) + geom_bar(stat="identity")
ggplot(data=israel_us_trans, aes(x=group, y=V1)) + geom_bar(stat="identity")
cor.test(as.numeric(israel), as.numeric(us), method = "spearman",na.rm=T)
cor.test(as.numeric(israel_us_trans$V1, israel_us_trans$V2), as.numeric(us), method = "spearman",na.rm=T)
israel_rus <- abo %>% filter(Country == 'Israel' | Country == 'Russia')
israel_rus <- israel_rus[,1:10]
israel_rus <- subset(israel_rus, select = -c(Population))
View(israel_rus)
israel_rus_trans <- transpose(israel_rus)
View(israel_rus_trans)
View(israel_rus_trans)
israel_rus_trans <- transpose(israel_rus)
israel_rus_trans@groups = groups_names
israel_rus_trans@group = groups_names
groups_names <- names(israel_rus)
israel_rus_trans <- transpose(israel_rus)
israel_rus_trans@group <- groups_names
israel_rus_trans <- transpose(israel_rus)
View(israel_us_trans)
View(israel_rus_trans)
View(israel_rus_trans)
israel_rus_trans <- israel_rus_trans[2:,]
israel_rus_trans <- israel_rus_trans[2:9,]
View(israel_rus_trans)
cor.test(as.numeric(israel_rus_trans$V1, israel_rus_trans$V2), as.numeric(us), method = "spearman",na.rm=T)
View(abo)
View(iris)
kmod <- kmeans(as.matrix(iris[,1:4]),centers=3)
table(kmod$cluster)
View(iris)
View(abo)
kmod <- kmeans(as.matrix(abo[,3:10]),centers=3)
table(kmod$cluster)
kmod$centers
kmod$tot.withinss
plot(abo$`O+`, abo$`A+`)
plot(abo$`O+`, abo$`B+`)
plot(abo$`O+`, abo$`AB+`)
plot(abo$`O+`, abo$`O-`)
plot(abo$`B+`, abo$`B-`)
plot(abo$`B+`, abo$`A+`)
r
plot(abo$`B+`, abo$`A+`, col=kmod$cluster)
plot(abo$`O+`, abo$`O-`, col=kmod$cluster)
#### Note:
#  Use the NbClust package to calculate the optimal number of clusters. Also use plots coloring the groups with the resulting clusters. You can use the autoplot function (ggfortify package) to see the cluster distribution. Pass the Country values as rownames so you can see each country on the graphs.
kmod <- kmeans(as.matrix(abo[,3:10]),centers=5)
table(kmod$cluster)
kmod$centers
kmod$tot.withinss
plot(abo$`O+`, abo$`O-`, col=kmod$cluster)
abo$continent <- countrycode(sourcevar = abo[, "country"],
origin = "country.name",
destination = "continent")
library(countrycode)
install.packages("countrycode")
library(countrycode)
library(countrycode)
abo$continent <- countrycode(sourcevar = abo[, "country"],
origin = "country.name",
destination = "continent")
View(abo)
abo$continent <- countrycode(sourcevar = abo[, "Country"],
origin = "country.name",
destination = "continent")
abo$continent <- countrycode(sourcevar = as.vector(abo[, "Country"]),
origin = "country.name",
destination = "continent")
abo[, "Country"]
abo[1:101, "Country"]
is.vector(as.vector(abo[1, "Country"]))
is.vector(as.vector(abo[, "Country"]))
abo$continent <- countrycode(sourcevar = as.vector(abo$Country),
origin = "country.name",
destination = "continent")
View(abo)
View(abo)
kmod <- kmeans(as.matrix(abo[,3:10]),centers=5)
table(kmod$cluster)
kmod$centers
kmod$tot.withinss
View(kmod)
plot(abo$`O+`, abo$`O-`)
plot(abo$`O+`, abo$`O-`, col=kmod$cluster)
abo %>% group_by(continent)
abo %>% group_by(continent) %>% select(continent, count())
library(plyr)
count(abo, "continent")
View(kmod)
kmod2 <- kmeans(as.matrix(iris[,1:4]),centers=2)
table(kmod2$cluster)
kmod$centers
kmod$tot.withinss
plot(iris$petal_length, iris$petal_width, col=kmod2$cluster)
plotElbow <- function(data, kmax=8) {
# Compute and plot wss for k = 2 to kmax
set.seed(123)
wss <- sapply(1:kmax,
function(k){kmeans(data, k, nstart=50,iter.max = 15 )$tot.withinss})
wss
plot(1:kmax, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
}
library(NbClust)
install.packages("NbClust")
library(NbClust)
res <- NbClust(iris[,1:4], distance = "euclidean", min.nc=2, max.nc=8, method = "complete")
library(NbClust)
res <- NbClust(abo[,3:10], distance = "euclidean", min.nc=2, max.nc=8, method = "complete")
e
kmod <- kmeans(as.matrix(abo[,3:10]),centers=3)
table(kmod$cluster)
kmod$centers
kmod$tot.withinss
plot(abo$`O+`, abo$`O-`)
plot(abo$`O+`, abo$`O-`, col=kmod$cluster)
plot(abo$`A+`, abo$`A-`, col=kmod$cluster)
plot(abo$`B+`, abo$`B-`, col=kmod$cluster)
t
t
plot(abo$`B+`, abo$`B-`, col=kmod$cluster)
plot(abo$`AB+`, abo$`AB-`, col=kmod$cluster)
plot(abo$`AB+`, abo$`AB-`, col=kmod$cluster)
plot(abo$`A`, abo$`0`, col=kmod$cluster)
plot(abo$`A`, abo$`0`, col=kmod$cluster)
plot(abo$`O`, abo$`A`, col=kmod$cluster)
plot(abo$`O`, abo$`A`, col=kmod$cluster)
install.packages(c("arm", "backports", "bayestestR", "BDgraph", "bibtex", "bit", "bit64", "broom", "bupaR", "Cairo", "cairoDevice", "callr", "car", "chron", "colourpicker", "covr", "data.table", "data.tree", "dendextend", "Deriv", "devtools", "dplyr", "DT", "edeaR", "effectsize", "emmeans", "expm", "forecast", "fpc", "fs", "gam", "gbm", "ggforce", "ggplot2", "glmnet", "glue", "gower", "gplots", "Hmisc", "htmlTable", "htmltools", "httr", "insight", "IRkernel", "isoband", "jomo", "jsonlite", "knitr", "labelled", "lava", "lavaan", "lcmm", "libcoin", "lmtest", "magick", "maptools", "matrixStats", "MCMCpack", "mgm", "mice", "misc3d", "mnormt", "multcomp", "nloptr", "NMF", "odbc", "openssl", "openxlsx", "parameters", "partykit", "pbapply", "performance", "pillar", "pkgbuild", "pls", "processx", "ps", "psych", "psychTools", "quantreg", "R.methodsS3", "R.oo", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "rJava", "rmarkdown", "rms", "roxygen2", "rrcov", "rvest", "RWeka", "shape", "shiny", "sjlabelled", "smacof", "SQUAREM", "stringdist", "stringi", "svglite", "sys", "systemfonts", "tibble", "tidyr", "tinytex", "TTR", "usethis", "V8", "vcd", "vctrs", "withr", "xfun", "xlsx", "XML", "xts", "zip"))
install.packages(c("arm", "backports", "bayestestR", "BDgraph", "bibtex", "bit", "bit64", "broom", "bupaR", "Cairo", "cairoDevice", "callr", "car", "chron", "colourpicker", "covr", "data.table", "data.tree", "dendextend", "Deriv", "devtools", "dplyr", "DT", "edeaR", "effectsize", "emmeans", "expm", "forecast", "fpc", "fs", "gam", "gbm", "ggforce", "ggplot2", "glmnet", "glue", "gower", "gplots", "Hmisc", "htmlTable", "htmltools", "httr", "insight", "IRkernel", "isoband", "jomo", "jsonlite", "knitr", "labelled", "lava", "lavaan", "lcmm", "libcoin", "lmtest", "magick", "maptools", "matrixStats", "MCMCpack", "mgm", "mice", "misc3d", "mnormt", "multcomp", "nloptr", "NMF", "odbc", "openssl", "openxlsx", "parameters", "partykit", "pbapply", "performance", "pillar", "pkgbuild", "pls", "processx", "ps", "psych", "psychTools", "quantreg", "R.methodsS3", "R.oo", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "rJava", "rmarkdown", "rms", "roxygen2", "rrcov", "rvest", "RWeka", "shape", "shiny", "sjlabelled", "smacof", "SQUAREM", "stringdist", "stringi", "svglite", "sys", "systemfonts", "tibble", "tidyr", "tinytex", "TTR", "usethis", "V8", "vcd", "vctrs", "withr", "xfun", "xlsx", "XML", "xts", "zip"))
install.packages(c("arm", "backports", "bayestestR", "BDgraph", "bibtex", "bit", "bit64", "broom", "bupaR", "Cairo", "cairoDevice", "callr", "car", "chron", "colourpicker", "covr", "data.table", "data.tree", "dendextend", "Deriv", "devtools", "dplyr", "DT", "edeaR", "effectsize", "emmeans", "expm", "forecast", "fpc", "fs", "gam", "gbm", "ggforce", "ggplot2", "glmnet", "glue", "gower", "gplots", "Hmisc", "htmlTable", "htmltools", "httr", "insight", "IRkernel", "isoband", "jomo", "jsonlite", "knitr", "labelled", "lava", "lavaan", "lcmm", "libcoin", "lmtest", "magick", "maptools", "matrixStats", "MCMCpack", "mgm", "mice", "misc3d", "mnormt", "multcomp", "nloptr", "NMF", "odbc", "openssl", "openxlsx", "parameters", "partykit", "pbapply", "performance", "pillar", "pkgbuild", "pls", "processx", "ps", "psych", "psychTools", "quantreg", "R.methodsS3", "R.oo", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "rJava", "rmarkdown", "rms", "roxygen2", "rrcov", "rvest", "RWeka", "shape", "shiny", "sjlabelled", "smacof", "SQUAREM", "stringdist", "stringi", "svglite", "sys", "systemfonts", "tibble", "tidyr", "tinytex", "TTR", "usethis", "V8", "vcd", "vctrs", "withr", "xfun", "xlsx", "XML", "xts", "zip"))
install.packages(c("arm", "backports", "bayestestR", "BDgraph", "bibtex", "bit", "bit64", "broom", "bupaR", "Cairo", "cairoDevice", "callr", "car", "chron", "colourpicker", "covr", "data.table", "data.tree", "dendextend", "Deriv", "devtools", "dplyr", "DT", "edeaR", "effectsize", "emmeans", "expm", "forecast", "fpc", "fs", "gam", "gbm", "ggforce", "ggplot2", "glmnet", "glue", "gower", "gplots", "Hmisc", "htmlTable", "htmltools", "httr", "insight", "IRkernel", "isoband", "jomo", "jsonlite", "knitr", "labelled", "lava", "lavaan", "lcmm", "libcoin", "lmtest", "magick", "maptools", "matrixStats", "MCMCpack", "mgm", "mice", "misc3d", "mnormt", "multcomp", "nloptr", "NMF", "odbc", "openssl", "openxlsx", "parameters", "partykit", "pbapply", "performance", "pillar", "pkgbuild", "pls", "processx", "ps", "psych", "psychTools", "quantreg", "R.methodsS3", "R.oo", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "rJava", "rmarkdown", "rms", "roxygen2", "rrcov", "rvest", "RWeka", "shape", "shiny", "sjlabelled", "smacof", "SQUAREM", "stringdist", "stringi", "svglite", "sys", "systemfonts", "tibble", "tidyr", "tinytex", "TTR", "usethis", "V8", "vcd", "vctrs", "withr", "xfun", "xlsx", "XML", "xts", "zip"))
install.packages(c("arm", "backports", "bayestestR", "BDgraph", "bibtex", "bit", "bit64", "broom", "bupaR", "Cairo", "cairoDevice", "callr", "car", "chron", "colourpicker", "covr", "data.table", "data.tree", "dendextend", "Deriv", "devtools", "dplyr", "DT", "edeaR", "effectsize", "emmeans", "expm", "forecast", "fpc", "fs", "gam", "gbm", "ggforce", "ggplot2", "glmnet", "glue", "gower", "gplots", "Hmisc", "htmlTable", "htmltools", "httr", "insight", "IRkernel", "isoband", "jomo", "jsonlite", "knitr", "labelled", "lava", "lavaan", "lcmm", "libcoin", "lmtest", "magick", "maptools", "matrixStats", "MCMCpack", "mgm", "mice", "misc3d", "mnormt", "multcomp", "nloptr", "NMF", "odbc", "openssl", "openxlsx", "parameters", "partykit", "pbapply", "performance", "pillar", "pkgbuild", "pls", "processx", "ps", "psych", "psychTools", "quantreg", "R.methodsS3", "R.oo", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "rJava", "rmarkdown", "rms", "roxygen2", "rrcov", "rvest", "RWeka", "shape", "shiny", "sjlabelled", "smacof", "SQUAREM", "stringdist", "stringi", "svglite", "sys", "systemfonts", "tibble", "tidyr", "tinytex", "TTR", "usethis", "V8", "vcd", "vctrs", "withr", "xfun", "xlsx", "XML", "xts", "zip"))
install.packages(c("arm", "backports", "bayestestR", "BDgraph", "bibtex", "bit", "bit64", "broom", "bupaR", "Cairo", "cairoDevice", "callr", "car", "chron", "colourpicker", "covr", "data.table", "data.tree", "dendextend", "Deriv", "devtools", "dplyr", "DT", "edeaR", "effectsize", "emmeans", "expm", "forecast", "fpc", "fs", "gam", "gbm", "ggforce", "ggplot2", "glmnet", "glue", "gower", "gplots", "Hmisc", "htmlTable", "htmltools", "httr", "insight", "IRkernel", "isoband", "jomo", "jsonlite", "knitr", "labelled", "lava", "lavaan", "lcmm", "libcoin", "lmtest", "magick", "maptools", "matrixStats", "MCMCpack", "mgm", "mice", "misc3d", "mnormt", "multcomp", "nloptr", "NMF", "odbc", "openssl", "openxlsx", "parameters", "partykit", "pbapply", "performance", "pillar", "pkgbuild", "pls", "processx", "ps", "psych", "psychTools", "quantreg", "R.methodsS3", "R.oo", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "rJava", "rmarkdown", "rms", "roxygen2", "rrcov", "rvest", "RWeka", "shape", "shiny", "sjlabelled", "smacof", "SQUAREM", "stringdist", "stringi", "svglite", "sys", "systemfonts", "tibble", "tidyr", "tinytex", "TTR", "usethis", "V8", "vcd", "vctrs", "withr", "xfun", "xlsx", "XML", "xts", "zip"))
install.packages(c("arm", "backports", "bayestestR", "BDgraph", "bibtex", "bit", "bit64", "broom", "bupaR", "Cairo", "cairoDevice", "callr", "car", "chron", "colourpicker", "covr", "data.table", "data.tree", "dendextend", "Deriv", "devtools", "dplyr", "DT", "edeaR", "effectsize", "emmeans", "expm", "forecast", "fpc", "fs", "gam", "gbm", "ggforce", "ggplot2", "glmnet", "glue", "gower", "gplots", "Hmisc", "htmlTable", "htmltools", "httr", "insight", "IRkernel", "isoband", "jomo", "jsonlite", "knitr", "labelled", "lava", "lavaan", "lcmm", "libcoin", "lmtest", "magick", "maptools", "matrixStats", "MCMCpack", "mgm", "mice", "misc3d", "mnormt", "multcomp", "nloptr", "NMF", "odbc", "openssl", "openxlsx", "parameters", "partykit", "pbapply", "performance", "pillar", "pkgbuild", "pls", "processx", "ps", "psych", "psychTools", "quantreg", "R.methodsS3", "R.oo", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "rJava", "rmarkdown", "rms", "roxygen2", "rrcov", "rvest", "RWeka", "shape", "shiny", "sjlabelled", "smacof", "SQUAREM", "stringdist", "stringi", "svglite", "sys", "systemfonts", "tibble", "tidyr", "tinytex", "TTR", "usethis", "V8", "vcd", "vctrs", "withr", "xfun", "xlsx", "XML", "xts", "zip"))
install.packages(c("arm", "backports", "bayestestR", "BDgraph", "bibtex", "bit", "bit64", "broom", "bupaR", "Cairo", "cairoDevice", "callr", "car", "chron", "colourpicker", "covr", "data.table", "data.tree", "dendextend", "Deriv", "devtools", "dplyr", "DT", "edeaR", "effectsize", "emmeans", "expm", "forecast", "fpc", "fs", "gam", "gbm", "ggforce", "ggplot2", "glmnet", "glue", "gower", "gplots", "Hmisc", "htmlTable", "htmltools", "httr", "insight", "IRkernel", "isoband", "jomo", "jsonlite", "knitr", "labelled", "lava", "lavaan", "lcmm", "libcoin", "lmtest", "magick", "maptools", "matrixStats", "MCMCpack", "mgm", "mice", "misc3d", "mnormt", "multcomp", "nloptr", "NMF", "odbc", "openssl", "openxlsx", "parameters", "partykit", "pbapply", "performance", "pillar", "pkgbuild", "pls", "processx", "ps", "psych", "psychTools", "quantreg", "R.methodsS3", "R.oo", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "rJava", "rmarkdown", "rms", "roxygen2", "rrcov", "rvest", "RWeka", "shape", "shiny", "sjlabelled", "smacof", "SQUAREM", "stringdist", "stringi", "svglite", "sys", "systemfonts", "tibble", "tidyr", "tinytex", "TTR", "usethis", "V8", "vcd", "vctrs", "withr", "xfun", "xlsx", "XML", "xts", "zip"))
install.packages(c("arm", "backports", "bayestestR", "BDgraph", "bibtex", "bit", "bit64", "broom", "bupaR", "Cairo", "cairoDevice", "callr", "car", "chron", "colourpicker", "covr", "data.table", "data.tree", "dendextend", "Deriv", "devtools", "dplyr", "DT", "edeaR", "effectsize", "emmeans", "expm", "forecast", "fpc", "fs", "gam", "gbm", "ggforce", "ggplot2", "glmnet", "glue", "gower", "gplots", "Hmisc", "htmlTable", "htmltools", "httr", "insight", "IRkernel", "isoband", "jomo", "jsonlite", "knitr", "labelled", "lava", "lavaan", "lcmm", "libcoin", "lmtest", "magick", "maptools", "matrixStats", "MCMCpack", "mgm", "mice", "misc3d", "mnormt", "multcomp", "nloptr", "NMF", "odbc", "openssl", "openxlsx", "parameters", "partykit", "pbapply", "performance", "pillar", "pkgbuild", "pls", "processx", "ps", "psych", "psychTools", "quantreg", "R.methodsS3", "R.oo", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "rJava", "rmarkdown", "rms", "roxygen2", "rrcov", "rvest", "RWeka", "shape", "shiny", "sjlabelled", "smacof", "SQUAREM", "stringdist", "stringi", "svglite", "sys", "systemfonts", "tibble", "tidyr", "tinytex", "TTR", "usethis", "V8", "vcd", "vctrs", "withr", "xfun", "xlsx", "XML", "xts", "zip"))
install.packages(c("arm", "backports", "bayestestR", "BDgraph", "bibtex", "bit", "bit64", "broom", "bupaR", "Cairo", "cairoDevice", "callr", "car", "chron", "colourpicker", "covr", "data.table", "data.tree", "dendextend", "Deriv", "devtools", "dplyr", "DT", "edeaR", "effectsize", "emmeans", "expm", "forecast", "fpc", "fs", "gam", "gbm", "ggforce", "ggplot2", "glmnet", "glue", "gower", "gplots", "Hmisc", "htmlTable", "htmltools", "httr", "insight", "IRkernel", "isoband", "jomo", "jsonlite", "knitr", "labelled", "lava", "lavaan", "lcmm", "libcoin", "lmtest", "magick", "maptools", "matrixStats", "MCMCpack", "mgm", "mice", "misc3d", "mnormt", "multcomp", "nloptr", "NMF", "odbc", "openssl", "openxlsx", "parameters", "partykit", "pbapply", "performance", "pillar", "pkgbuild", "pls", "processx", "ps", "psych", "psychTools", "quantreg", "R.methodsS3", "R.oo", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "rJava", "rmarkdown", "rms", "roxygen2", "rrcov", "rvest", "RWeka", "shape", "shiny", "sjlabelled", "smacof", "SQUAREM", "stringdist", "stringi", "svglite", "sys", "systemfonts", "tibble", "tidyr", "tinytex", "TTR", "usethis", "V8", "vcd", "vctrs", "withr", "xfun", "xlsx", "XML", "xts", "zip"))
